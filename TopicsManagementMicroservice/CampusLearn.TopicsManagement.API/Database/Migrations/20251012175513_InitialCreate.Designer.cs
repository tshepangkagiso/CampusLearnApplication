// <auto-generated />
using System;
using CampusLearn.TopicsManagement.API.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CampusLearn.TopicsManagement.API.Database.Migrations
{
    [DbContext(typeof(TopicsDbContext))]
    [Migration("20251012175513_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CampusLearn.Library.TopicModels.FAQs", b =>
                {
                    b.Property<int>("FAQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FAQID"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FrequentlyAskedQuestion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TutorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("FAQID");

                    b.HasIndex("ModuleCode");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("CampusLearn.Library.TopicModels.QueryResponse", b =>
                {
                    b.Property<int>("QueryResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueryResponseID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HelpfulVotes")
                        .HasColumnType("int");

                    b.Property<bool>("IsSolution")
                        .HasColumnType("bit");

                    b.Property<string>("MediaContentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QueryTopicID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ResponseCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TutorID")
                        .HasColumnType("int");

                    b.HasKey("QueryResponseID");

                    b.HasIndex("QueryTopicID");

                    b.ToTable("QueryResponses");
                });

            modelBuilder.Entity("CampusLearn.Library.TopicModels.QueryTopic", b =>
                {
                    b.Property<int>("QueryTopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueryTopicID"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssignedTutorID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAssigned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrivateChatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryTopicDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryTopicTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RelatedModuleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TopicCreationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("QueryTopicID");

                    b.HasIndex("IsResolved");

                    b.HasIndex("RelatedModuleCode");

                    b.ToTable("QueryTopics");
                });

            modelBuilder.Entity("CampusLearn.Library.TopicModels.QueryResponse", b =>
                {
                    b.HasOne("CampusLearn.Library.TopicModels.QueryTopic", "QueryTopic")
                        .WithMany("Responses")
                        .HasForeignKey("QueryTopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueryTopic");
                });

            modelBuilder.Entity("CampusLearn.Library.TopicModels.QueryTopic", b =>
                {
                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
